// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_DB_URL")
  directUrl = env("POSGRESS_DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  roles         String    @default("general")
  trustStatus   String    @default("new")
  StableItem    StableItem[]
  booking       Booking[]
  memberBooking MemberBooking[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model StableItem {
  // A unique short string UUID.
  id    String @id
  // URL to a stable image.
  image String
  text  String?
  character Json?

  imageRequest Json?

  claimCode    String
  claimStatus  String
  claimVisible Boolean
  createdAt    DateTime @default(now())

  owner   User? @relation(fields: [ownerId], references: [id])
  ownerId String?

  booking       Booking?
  memberBooking MemberBooking?
}

model Booking {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  numGuests   Int
  maxGuests   Int      @default(4)
  bookingCode String   @unique
  status      String   @default("pending")
  withCat     Boolean  @default(false)
  withDog     Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId String

  userItem   StableItem? @relation(fields: [userItemId], references: [id])
  userItemId String?     @unique

  member MemberBooking[]
}

model MemberBooking {
  id     Int    @id @default(autoincrement())
  status String

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId Int

  user   User @relation(fields: [userId], references: [id])
  userId String

  userItem   StableItem? @relation(fields: [userItemId], references: [id])
  userItemId String?     @unique
}



model SignupCode {
  id          String @id
  trustStatus String @default("new")
  roles       String @default("general")
}

model ImageAdapterSetting {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  adapter   String

  promptTemplate    String
  negativePrompt    String @default("")
  steps             Int @default(20)
  variants          String[]
}
